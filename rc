#!/bin/sh

alias cp='cp -rf'
alias feh='feh -dF'
alias ftp='ftp -p'
alias grep='grep --color=auto'
alias ln='ln -srnf'
alias logout='swaymsg exit'
alias ls='ls -A --color=auto --group-directories-first'
alias lscheckout='sudo pacman -Qkk | grep \)$ |& sort'
alias lsdisowned='comm -23 <(find /{etc,usr,var} \( -path /etc/\*cert\* -o -path /usr/share/mime -o -path /var/\*/\*man \) -prune -o -type d -printf %p/\\n -o -print 2>/dev/null | sort) <(pacman -Qlq | sort -u)'
alias lsorphaned='comm -23 <(pacman -Qdq) <(pacman -Qeq | xargs -l pactree -lu | sed -E "s/[<=>].+//;s/\.so$//" | sort -u)'
alias lspackages='pacman -Qeq'
alias mkdir='mkdir -p'
alias pacman='pacman --color=auto'
alias rm='rm -rf'
alias sl=systemctl
alias sudo='sudo '
alias yt-dlp='yt-dlp -f "bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]"'

fetchallgit() { find ~/VRChat-avatars/{.*,*}/.git ~/repositories/*/.git -prune -execdir sh -c 'git fetch --all' sh {} + ; }
gcallgit() { find ~/VRChat-avatars/{.*,*}/.git ~/repositories/*/.git -prune -execdir sh -c 'git reflog expire --expire=now --all; git gc --prune=now --aggressive' sh {} + ; }
lsgit() { find ~/VRChat-avatars/{.*,*}/.git ~/repositories/*/.git -prune -execdir sh -c '. ~/repositories/dotfiles/git/git-prompt.sh; __git_ps1 "%s \t"; basename "$PWD"' sh {} + ; }
resetallgit() { find ~/repositories/*/.git -prune -execdir sh -c 'git reset --hard origin/"$(git symbolic-ref --short HEAD)"' sh {} + ; }
updatevrctemplate() { find ~/VRChat-avatars/*/.git -prune -execdir sh -c 'git rebase template-SDK3/master; git rebase --skip; git filter-date' sh {} + ; }
lsimages() { find Assets \( -iname *.bmp -o -iname *.gif -o -iname *.jpeg -o -iname *.jpg -o -iname *.png -o -iname *.tga \) -exec identify -format '%i%wx%h\n' {} + ; }
grepmetadata_images() { find Assets \( -iname *.bmp.meta -o -iname *.gif.meta -o -iname *.jpeg.meta -o -iname *.jpg.meta -o -iname *.png.meta -o -iname *.tga.meta \) -exec grep "$@" {} + ; }

case "$(basename "$(readlink /proc/"$$"/exe)")" in
  bash )
    . ~/repositories/dotfiles/git/git-prompt.sh
    . ~/repositories/dotfiles/git/git-completion.bash
    PS1=$'\n\u@\h \w $(__git_ps1 "[%s]")\n\\$ '
    HISTCONTROL=erasedups

    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'
    #bind '"^[[A": history-search-backward'
    #bind '"^[[B": history-search-forward'
    bind 'TAB: menu-complete'
    bind 'set colored-stats on'
    bind 'set menu-complete-display-prefix on'
    bind 'set show-all-if-ambiguous on'

    _cd() { \cd "$@"; ls; [[ -a .git/config ]] && echo && git log && echo && git remote get-url origin ; }
    alias cd=_cd
    ;;

  zsh )
    . ~/repositories/dotfiles/git/git-prompt.sh
    . /usr/share/doc/pkgfile/command-not-found.zsh
    PS1=$'\n%F{4}%n%f@%M %~ $(__git_ps1 "[%s]")\n%(!.#.>) '
    HISTFILE=~/repositories/dotfiles/zsh_history
    HISTSIZE=1000
    SAVEHIST=1000

    autoload -U compinit; compinit -D
    autoload -U history-search-end

    setopt histignorealldups
    setopt histreduceblanks
    setopt listpacked
    unsetopt listtypes
    unsetopt nomatch
    setopt promptsubst
    setterm -blength 0 2>/dev/null

    zle -N history-beginning-search-backward-end history-search-end
    zle -N history-beginning-search-forward-end  history-search-end

    zstyle ':completion:*' list-colors  "${(s/:/)LS_COLORS}"
    zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
    zstyle ':completion:*:*:vim*:*' ignored-patterns '*.od*' '*.pdf'

    chpwd() { ls; [[ -a .git/config ]] && echo && git log && echo && git remote get-url origin ; }
    precmd() { bindkeys ; }

    bindkeys() {
      bindkey -e
      bindkey "${terminfo[khome]}" beginning-of-line
      bindkey "${terminfo[kend]}"  end-of-line
      bindkey "${terminfo[kdch1]}" delete-char
      #bindkey "${terminfo[kcuu1]}" history-beginning-search-backward-end
      #bindkey "${terminfo[kcud1]}" history-beginning-search-forward-end
      bindkey "${terminfo[kcbt]}"  reverse-menu-complete
      bindkey "[A" history-beginning-search-backward-end
      bindkey "[B" history-beginning-search-forward-end
    }
    ;;
esac
